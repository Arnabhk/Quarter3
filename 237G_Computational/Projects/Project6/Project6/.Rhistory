stockdata.annual
}
})
Sys.time()
stock.annually <- apply(matrix(allPermnos),1,function(x){
if(mod%%400 == 0){
print(paste(x,Sys.time()))
}
stockdata <- stock.data[stock.data$PERMNO == x & !is.na(stock.data$RET),c("DATE","PERMNO","MARKETCAP","RET")]
stockdata.xts <- xts(stockdata[,-1],order.by=as.Date(stockdata$DATE))
if(length(stockdata.xts) > 0){
stockdata.annual <- apply.yearly(1+stockdata.xts$RET,FUN=prod)-1
stockdata.annual <- cbind(stockdata.annual,stockdata.xts[index(stockdata.annual),c("PERMNO","MARKETCAP","CUSIP","TICKER")])
stockdata.annual <- as.data.frame(stockdata.annual)
#stocknamesForStock <- stock.names[stock.names$PERMNO == x,]
#stocknamesForStock$NAMEDT = as.Date(stocknamesForStock$NAMEDT)
#stocknamesForStock$NAMEENDT = as.Date(stocknamesForStock$NAMEENDT)
#for(i in 1:dim(stockdata.annual)[1]){
#   possibleNameEvent <- stocknamesForStock[stocknamesForStock$NAMEDT<=as.Date(row.names(stockdata.annual[i,])) & stocknamesForStock$NAMEENDT >= row.names(stockdata.annual[i,]),]
#  stockdata.annual[i,"CUSIP"] <- possibleNameEvent$CUSIP
# stockdata.annual[i,"TICKER"] <- possibleNameEvent$TICKER
#}
stockdata.annual
}
})
Sys.time()
Sys.time()
stock.annually <- apply(matrix(allPermnos),1,function(x){
if(x%%400 == 0){
print(paste(x,Sys.time()))
}
stockdata <- stock.data[stock.data$PERMNO == x & !is.na(stock.data$RET),c("DATE","PERMNO","MARKETCAP","RET")]
stockdata.xts <- xts(stockdata[,-1],order.by=as.Date(stockdata$DATE))
if(length(stockdata.xts) > 0){
stockdata.annual <- apply.yearly(1+stockdata.xts$RET,FUN=prod)-1
stockdata.annual <- cbind(stockdata.annual,stockdata.xts[index(stockdata.annual),c("PERMNO","MARKETCAP","CUSIP","TICKER")])
stockdata.annual <- as.data.frame(stockdata.annual)
#stocknamesForStock <- stock.names[stock.names$PERMNO == x,]
#stocknamesForStock$NAMEDT = as.Date(stocknamesForStock$NAMEDT)
#stocknamesForStock$NAMEENDT = as.Date(stocknamesForStock$NAMEENDT)
#for(i in 1:dim(stockdata.annual)[1]){
#   possibleNameEvent <- stocknamesForStock[stocknamesForStock$NAMEDT<=as.Date(row.names(stockdata.annual[i,])) & stocknamesForStock$NAMEENDT >= row.names(stockdata.annual[i,]),]
#  stockdata.annual[i,"CUSIP"] <- possibleNameEvent$CUSIP
# stockdata.annual[i,"TICKER"] <- possibleNameEvent$TICKER
#}
stockdata.annual
}
})
library(dplyr)
stock.data.new <- stock.data[!is.na(stock.data$RET),]
stock.data.new <- stock.data[!is.na(stock.data$RET),c("DATE","PERMNO","MARKETCAP","RET")]
stock.annually <- apply(matrix(allPermnos),1,function(x){
stockdata.xts <- xts(stockdata[,-1],order.by=as.Date(stockdata$DATE))
}
}
}
stock.data.new <- stock.data[!is.na(stock.data$RET),c("DATE","PERMNO","MARKETCAP","RET")]
stockdata.xts <- xts(stock.data.new[,-1],order.by=as.Date(stock.data.new$DATE))
x <- allPermnos[1]
x
stockdata <- stockdata.xts %>% filter(PERMNO == x)
library(dplyr)
stockdata <- stockdata.xts %>% filter(PERMNO == x)
library(dplyr)
install.packages(dplyr)
install.packages("dplyr")
library(dplyr)
install.packages("installr");
library(installr)
library(DataAnalytics)
library(installr)
install.packages("installr")
library(installr)
updateR()
# Function to get data #
getData <- function(sql, n = -1){
#setup connection
res <- dbSendQuery(wrds, sql)
dbHasCompleted(res)
#perform fetch
returnData <- fetch(res, n)
#clear memory
dbClearResult(res)
return(returnData)
}
sql1 <- "SELECT * FROM ccmfundq WHERE LPERMNO='10000'"
dummy1 <- getData(sql1)
sql1 <- "SELECT * FROM CRSPQ.ccmfundq WHERE LPERMNO='10000'"
dummy1 <- getData(sql1)
sql1 <- "SELECT * FROM CRSPA.ccmfundq WHERE LPERMNO='10000'"
dummy1 <- getData(sql1)
sql1 <- "SELECT * FROM CRSPA.CCMFUNDQ WHERE LPERMNO='10000'"
dummy1 <- getData(sql1)
sql1 <- "SELECT * FROM COMPM.FUNDQ WHERE LPERMNO='10000'"
dummy1 <- getData(sql1)
sql1 <- "SELECT * FROM CRSPA.CCMFUNDQ WHERE LPERMNO='10000'"
dummy1 <- getData(sql1)
sql2 <- "SELECT * FROM COMPM.FUNDQ WHERE gvkey = '012141'"
dummy1 <- getData(sql2)
dummy1
head(dummy1)
View(dummy1)
sql2 <- "SELECT RDQ,OANCFY,IVNCFY,FINCFY FROM COMPM.FUNDQ WHERE gvkey = '012141'"
head(dummy1) <- getData(sql2)
dummy1 <- getData(sql2)
dummy1
sql2 <- "SELECT RDQ AS Date,OANCFY AS OperatingCF,IVNCFY AS InvestingCF,FINCFY AS FinancingCF, DLCQ AS CurrentDebt, DLTTQ AS LongTermDebt, ATQ AS TotalAssets, SEQQ AS CommonEq, PSTKQ AS LiquidationVal
FROM COMPM.FUNDQ WHERE gvkey = '012141'"
dummy1 <- getData(sql2)
View(dummy1)
getData <- function(sql, n = -1){
#setup connection
res <- dbSendQuery(wrds, sql)
dbHasCompleted(res)
#perform fetch
returnData <- fetch(res, n)
#clear memory
dbClearResult(res)
return(returnData)
}
sql2 <- "SELECT RDQ AS Date,OANCFY AS OperatingCF,IVNCFY AS InvestingCF,FINCFY AS FinancingCF, DLCQ AS CurrentDebt, DLTTQ AS LongTermDebt, ATQ AS TotalAssets, SEQQ AS CommonEq, PSTKQ AS LiquidationVal
FROM COMPM.FUNDQ WHERE gvkey = '012141'"
dummy1 <- getData(sql2)
# Function to get data #
getData <- function(sql, n = -1){
#setup connection
res <- dbSendQuery(wrds, sql)
dbHasCompleted(res)
#perform fetch
returnData <- fetch(res, n)
#clear memory
dbClearResult(res)
return(returnData)
}
sql.fundamentals <- "SELECT RDQ AS Date,OANCFY AS OperatingCF,IVNCFY AS InvestingCF,FINCFY AS FinancingCF, DLCQ AS CurrentDebt, DLTTQ AS LongTermDebt, ATQ AS TotalAssets, SEQQ AS CommonEq, PSTKQ AS LiquidationVal
FROM COMPM.FUNDA"
fundamentals <- getData(sql.fundamentals)
sql.fundamentals <- "SELECT RDQ AS Date,OANCF AS OperatingCF,IVNCF AS InvestingCF,FINCF AS FinancingCF, DLC AS CurrentDebt, DLTT AS LongTermDebt, AT AS TotalAssets, SEQ AS CommonEq, PSTK AS LiquidationVal
FROM COMPM.FUNDA"
fundamentals <- getData(sql.fundamentals)
sql.dumm1 <- "SELECT * FROM COMPM.FUNDA"
sql.dumm1 <- "SELECT * FROM COMPM.FUNDA"
dummy5 <- getData(sql.dumm1,1)
View(dummy5)
sql.fundamentals <- "SELECT DATATDATE AS Date,OANCF AS OperatingCF,IVNCF AS InvestingCF,FINCF AS FinancingCF, DLC AS CurrentDebt, DLTT AS LongTermDebt, AT AS TotalAssets, SEQ AS CommonEq, PSTK AS LiquidationVal FROM COMPM.FUNDA"
fundamentals <- getData(sql.fundamentals)
sql.fundamentals <- "SELECT DATADATE AS Date,OANCF AS OperatingCF,IVNCF AS InvestingCF,FINCF AS FinancingCF, DLC AS CurrentDebt, DLTT AS LongTermDebt, AT AS TotalAssets, SEQ AS CommonEq, PSTK AS LiquidationVal FROM COMPM.FUNDA"
fundamentals <- getData(sql.fundamentals)
sql.fundamentalsq <- "SELECT RDQ AS Date,OANCFY AS OperatingCF,IVNCFY AS InvestingCF,FINCFY AS FinancingCF, DLCQ AS CurrentDebt, DLTTQ AS LongTermDebt, ATQ AS TotalAssets, SEQQ AS CommonEq, PSTKQ AS LiquidationVal FROM COMPM.FUNDQ"
fundamentals.quarterly <- getData(sql.fundamentalsq)
getData <- function(sql, n = -1){
#setup connection
res <- dbSendQuery(wrds, sql)
dbHasCompleted(res)
#perform fetch
returnData <- fetch(res, n)
#clear memory
dbClearResult(res)
return(returnData)
}
sql.permnoLink <- "SELECT GVKEY,LPERMNO FROM CRSPA.CCMXPF_LINKTABLE"
permnoLink <- getData(sql.permnoLink)
sql.stocknames <- "SELECT PERMNO,COMNAM FROM CRSPA.STOCKNAMES"
stocknames <- getData(sql.stocknames)
sql.fundamentals <- "SELECT GVKEY AS GVKEY, DATADATE AS Date,OANCF AS OperatingCF,
IVNCF AS InvestingCF,FINCF AS FinancingCF,
DLC AS CurrentDebt, DLTT AS LongTermDebt,
AT AS TotalAssets, SEQ AS CommonEq, PSTK AS LiquidationVal
FROM COMPM.FUNDA funda"
fundamentals <- getData(sql.fundamentals)
suppressWarnings(library(dplyr))
fundamentals %<% filter(GVKEY == 012141)
fundamentals %>% filter(GVKEY == 012141)
fundamentals %>% filter(GVKEY == '012141')
fundamentals %>% filter(GVKEY == '012141') %>% mutate(cashflow = OperatingCF + InvestingCF + FinancingCF)
fundamentals %>% filter(GVKEY == '012141') %>% mutate(cashflow = OperatingCF + InvestingCF + FinancingCF) %>% mutate(marketLRatio = (CurrentDebt+LongTermDebt)/TotalAssets)
fundamentals %>% filter(GVKEY == '012141') %>% filter(complete.cases(.))
fundamentals %>% filter(GVKEY == '012141') %>% filter(complete.cases(.)) %>% mutate(cashflow = OperatingCF + InvestingCF + FinancingCF) %>% mutate(marketLRatio = (CurrentDebt+LongTermDebt)/TotalAssets) %>% mutate(bookLRatio = (CurrentDebt+LongTermDebt)/(CurrentDebt+LongTermDebt+CommonEq))
sql.fundamentals <- "SELECT GVKEY AS GVKEY, DATADATE AS Date,OANCF AS OperatingCF,
IVNCF AS InvestingCF,FINCF AS FinancingCF,RE as Earnings,
DLC AS CurrentDebt, DLTT AS LongTermDebt,
AT AS TotalAssets, SEQ AS CommonEq, PSTK AS LiquidationVal
FROM COMPM.FUNDA funda"
fundamentals <- getData(sql.fundamentals)
path1 = "C:/_UCLA/IAQF/"
tsy10 <- read.csv(paste(path1,"TSY10.csv",sep = ""),stringsAsFactors = FALSE,header = TRUE)
path1 = "C:/_UCLA/IAQF/Durga/"
tsy10 <- read.csv(paste(path1,"TSY10.csv",sep = ""),stringsAsFactors = FALSE,header = TRUE)
ccy <- read.csv(paste(path1,"CCY.csv",sep = ""),stringsAsFactors = FALSE,header = TRUE)
cad <- read.csv(paste(path1,"CAD.csv",sep = ""),stringsAsFactors = FALSE,header = TRUE)
eur_idx <- read.csv(paste(path1,"eur.csv",sep = ""),stringsAsFactors = FALSE,header = TRUE)
usd_idx <- read.csv(paste(path1,"DXY.csv",sep = ""),stringsAsFactors = FALSE,header = TRUE)
usd_bb_idx <- read.csv(paste(path1,"BBDXY.csv",sep = ""),stringsAsFactors = FALSE,header = TRUE)
library(lubridate)
library(xts)
library(quantmod)
ccy_list <- list(1)
for (i in 1:n) {
ccy_list <- c(ccy_list,list(as.xts(as.numeric(as.character(ccy[,2*i])), order.by = parse_date_time(ccy[,2*i-1],c('dmy')))))
}
n <- ncol(ccy)/2
for (i in 1:n) {
ccy_list <- c(ccy_list,list(as.xts(as.numeric(as.character(ccy[,2*i])), order.by = parse_date_time(ccy[,2*i-1],c('dmy')))))
}
colnames(ccy_list)
names(ccy_list)
tsy10_xts <- as.xts(tsy10[,-1],order.by = parse_date_time(tsy10[,1],c('mdy')))
tsy10_xts <- tsy10_xts["1971/2017"]
cad_xts <- as.xts(cad[,-1],order.by = parse_date_time(cad[,1],c('mdy')))
euridx_xts <- as.xts(eur_idx[,-1],order.by = parse_date_time(eur_idx[,1],c('mdy')))
euridx_xts1 <- weeklyReturn(euridx_xts)
usd_idx_xts <- as.xts(usd_idx[,-1],order.by = parse_date_time(usd_idx[,1],c('mdy')))
usd_bb_idx_xts <- as.xts(usd_bb_idx[,-1],order.by = parse_date_time(usd_bb_idx[,1],c('mdy')))
ccy_list <- c(ccy_list,list(cad_xts),list(euridx_xts),list(usd_idx_xts))
names(ccy_list)
colnames(ccy_list)
names_vec <- c("Zero")
for(i in 1:n){
names_vec <- c(names_vec,colnames(ccy)[2*i])
}
names_vec <- sub(".BGN.Curncy","",names_vec)
names_vec <- c(names_vec,"CAD","EUR Index","USD Index")
names(ccy_list) <- names_vec
ccy_list <- ccy_list[-1]
names(ccy_list)
class(ccy_list)
ccy_list
# Omitting NA
for(i in 1: length(ccy_list)){
ccy_list[[i]] <- na.omit(ccy_list[[i]])
}
ccy_list[["EUR"]]
names(ccy_list)
loadSymbols("ARS",src="oanda")
loadSymbols("ARS/USD",src="oanda")
ARSUSD
ccylist <- c("ARS","BRL","CLP","COP","MXN","HUF","PLN","RUB","TRY","ZAR","IDR","INR","KRW","PHP","THB")
sapply(ccylist,function(x){loadSymbols(paste0(x,"/USD"),src="oanda")})
setwd("C:/_UCLA/Quarter3/237G_Computational/Projects/Project4/Project3")
setwd("C:/_UCLA/Quarter3/237G_Computational/Projects/Project4/Project3")
setwd("C:/_UCLA/Quarter3/237G_Computational/Projects/Project4/Project3")
kable(t(duration),col.names = c(1:5))
library(knitr)
data <- matrix(nrow=5,ncol=6)
data[1,] <- c(0.049,0.058,0.071,0.068,0.075,0.092)
data[2,] <- c(0.049,0.044,0.037,0.056,0.062,0.069)
data[3,] <- c(0.049,0.031,0.026,0.051,0.067,0.048)
data[4,] <- c(0.049,0.05,0.061,0.069,0.069,0.06)
data[5,] <- c(0.049,0.044,0.055,0.061,0.058,0.065)
meanRates <- sapply(2:ncol(data),function(x){
apply(data[,c(1:x)],1,mean)
})
meanRates <- cbind(data[,1],meanRates)
duration <- sapply(2:ncol(meanRates),function(x){
exp(-(x-1)*data[,x])
})
duration <- apply(duration,2,mean)
kable(t(duration),col.names = c(1:5))
meanRates
2:ncol(meanRates)
x <- 4
exp(-(x-1)*data[,x])
data[,x]
meanRates
meanRates[,x]
duration <- sapply(2:ncol(meanRates),function(x){
exp(-(x-1)*meanRates[,x])
})
duration
duration <- apply(duration,2,mean)
duration
kable(t(duration),col.names = c(1:5))
strike <- 0.045
data-K
data-strike
data
data-strike
pmax(data-strike,0)
payoff <- pmax(data-strike,0)
data[,-1]
data
payoff <- pmax(data[,-1]-strike,0)
payoff
meanRates <- sapply(2:ncol(data),function(x){
apply(data[,c(1:x)],1,mean)
})
meanRates
duration <- sapply(1:ncol(meanRates),function(x){
exp(-x*meanRates[,x])
})
duration
duration <- apply(duration,2,mean)
kable(t(duration),col.names = c(1:5))
duration*payoff
payoff
duration
duration <- sapply(1:ncol(meanRates),function(x){
exp(-x*meanRates[,x])
})
duration
duration_mean <- apply(duration,2,mean)
pvpayoff <- duration*payoff
pvpayoff
price <- apply(pvpayoff,1,sum)
price
mean_price <- mean(price)
payoff
data[,-1]
strike <- 0.047
payoff <- pmax(data[,-1]-strike,0)
payoff
pvpayoff <- duration*payoff
pvpayoff
price <- apply(pvpayoff,1,sum)
price
mean_price <- mean(price)
mean_price
strike <- 0.045
payoff <- pmax(data[,-1]-strike,0)*100
payoff
pvpayoff <- duration*payoff
price <- apply(pvpayoff,1,sum)
mean_price <- mean(price)
mean_price
strike <- 0.067
payoff <- pmax(strike-data[,-1],0)*100
pvpayoff <- duration*payoff
price <- apply(pvpayoff,1,sum)
mean_price <- mean(price)
mean_price
strike <- 0.067
ncol(data)
data[,ncol(data)]
period <- 5
pmax(data[,period],0)
payoff_cap <- pmax(data[,period]-strike,0)
payoff_cap
data[,period]
data[,period+1]
payoff_cap <- pmax(data[,period+1]-strike,0)
payoff_cap
payoff_floor <- pmax(strike - data[,period+1],0)
payoff_floor
duration
duration[,period]
payoff_cap * duration[,period]
price_cap <- payoff_cap * duration[,period]
price_cap_mean <- mean(price_cap)
price_cap_mean
payoff_cap <- pmax(data[,period+1]-strike,0)*100
payoff_cap
price_cap <- payoff_cap * duration[,period]
price_cap_mean <- mean(price_cap)
price_cap_mean
payoff_floor <- pmax(strike - data[,period+1],0)
payoff_floor <- pmax(strike - data[,period+1],0)*100
payoff_floor
price_floor <- payoff_floor * duration[,period]
price_floor_mean <- mean(price_floor)
price_floor_mean
payoff_cap
duration[,period]
price_cap
pvpayoff
payoff_cap
strike <- 0.064
period <- 5
payoff_cap <- pmax(data[,period+1]-strike,0)*100
payoff_cap
price_cap <- payoff_cap * duration[,period]
price_cap
price_cap_mean <- mean(price_cap)
price_cap_mean
strike <- 0.067
period <- 5
payoff_cap <- pmax(data[,period+1]-strike,0)*100
price_cap <- payoff_cap * duration[,period]
price_cap_mean <- mean(price_cap)
price_cap_mean
strike <- 0.067
period <- 5
strike <- 0.063
period <- 5
payoff_cap <- pmax(data[,period+1]-strike,0)*100
price_cap <- payoff_cap * duration[,period]
price_cap_mean <- mean(price_cap)
price_cap_mean
payoff_cap
meanRates
meanRates[,period]
meanRates
payoff_avg <- pmax(meanRates[,period]-strike,0)*100
duration[,period]
price_avg <- payoff_avg * duration[,period]
price_avg_mean <- mean(price_avg)
price_avg_mean
price_cap_mean
price_avg_mean
meanRates[,period]
sd(data[,period+1])
rate5 <- sd(data[,period+1])
avgrate5 <- sd(meanRates[,period])
avgrate5
strike <- 0.063
period <- 5
payoff_cap <- pmax(data[,period+1]-strike,0)*100
price_cap <- payoff_cap * duration[,period]
price_cap_mean <- mean(price_cap)
price_cap_mean
payoff_avg <- pmax(meanRates[,period]-strike,0)*100
price_avg <- payoff_avg * duration[,period]
price_avg_mean <- mean(price_avg)
price_avg_mean
payoff_cap
meanRates
duration
kable(t(duration_mean),col.names = c(1:5))
strike <- 0.045
payoff <- pmax(data[,-1]-strike,0)*100
pvpayoff <- duration*payoff
price <- apply(pvpayoff,1,sum)
mean_price <- mean(price)
mean_price
strike <- 0.067
payoff <- pmax(strike-data[,-1],0)*100
pvpayoff <- duration*payoff
price <- apply(pvpayoff,1,sum)
mean_price <- mean(price)
mean_price
payoff_cap
meanRates
setwd("././Project6")
setwd("C:/_UCLA/Quarter3/237G_Computational/Projects/Project6")
setwd("././Project6")
setwd("././Project4")
callPrices <- read.csv("callPrices.csv",header = FALSE)
callPrices
plot(x=seq(0.12,0.48,0.04),y=callPrices)
callPrices <- read.csv("callPrices.csv",header = FALSE)
seq(0.12,0.48,0.04)
callPrices
plot(x=seq(0.12,0.48,0.04),y=callPrices)
length(seq(0.12,0.48,0.04))
callPrices[,1]
plot(x=seq(0.12,0.48,0.04),y=callPrices[,1])
plot(x=seq(0.12,0.48,0.04),y=callPrices[,1],type="l")
plot(x=seq(0.12,0.48,0.04),y=callPrices[,1],type="l",main="Lookback call prices")
plot(x=seq(0.12,0.48,0.04),y=callPrices[,1],type="l",main="Lookback call prices",xlab="Call Price",ylab="Volatility")
plot(x=seq(0.12,0.48,0.04),y=callPrices[,1],type="l",main="Lookback call prices",ylab="Call Price",xlab="Volatility")
system("R CMD SHLIB Project4.sln")
system("R CMD SHLIB Project4.sln")
system("R CMD SHLIB ./Project4/Question1.cpp")
system("R CMD SHLIB Project4.sln")
dyn.load("./x64Debug/Project6.dll")
dyn.load("./x64/Debug/Project6.dll")
dyn.load("././x64/Debug/Project6.dll")
setwd("C:/_UCLA/Quarter3/237G_Computational/Projects/Project6")
dyn.load("./x64/Debug/Project6.dll")
callPrices <- rep(0,10)
putPrices <- rep(0,10)
.C("Question1",
callPrices = as.double(callPricesOut),
putPrices = as.double(putPricesOut))
setwd("~/mfeR/mfeR/week4/Lab")
system("R CMD SHLIB BlackSholesPrice1.cpp")
dyn.load("BlackSholesPrice1.dll")
random <- rnorm(length(optionsData$sigma))
priceR <- rep(0, 10)
optionsData <- read.table("optionsdata.csv",header = TRUE,sep=",",stringsAsFactors = FALSE)
random <- rnorm(length(optionsData$sigma))
priceR <- rep(0, 10)
price1 <- rep(0,10)
.C("stockPriceBS", as.double(optionsData$S0),
as.double(optionsData$r),as.double(optionsData$sigma),
as.double(optionsData$T),as.double(random),
as.integer(length(optionsData$sigma)),
priceR = as.double(price1))$priceR
.C("Question1::Question1",
callPrices = as.double(callPricesOut),
putPrices = as.double(putPricesOut))
.C("Question1",
callPrices = as.double(callPricesOut),
putPrices = as.double(putPricesOut))
c("Question1")
.C("Question1")
is.loaded("Question1")
is.loaded("Project6")
is.loaded()
dlls <- getLoadedDLLs()
dlls
getDLLRegisteredRoutines(dlls$base)
proj <- dyn.load("./x64/Debug/Project6.dll")
setwd("C:/_UCLA/Quarter3/237G_Computational/Projects/Project6")
proj <- dyn.load("./x64/Debug/Project6.dll")
getDLLRegisteredRoutines(proj)
system("R CMD SHLIB ./Project4/Question1.cpp")
system("R CMD SHLIB ./Project4/Question1.cpp")
proj <- dyn.load("./x64/Debug/Project6.dll")
system("R CMD SHLIB ./Project4/Question1.cpp")
system("R CMD SHLIB ./Project4/Question1.cpp")
setwd("C:/_UCLA/Quarter3/237G_Computational/Projects/Project6")
system("R CMD SHLIB ./Project4/Question1.cpp")
system("R CMD SHLIB ./Project4/Question1.cpp")
system("R CMD SHLIB ./Project4/Question1.cpp")
volSeq <- seq(0.12,0.48,0.04)
for(vol in volSeq){
}
library(knitr)
callPrices <- read.csv("callPrices.csv",header = FALSE)
library(knitr)
setwd("C:/_UCLA/Quarter3/237G_Computational/Projects/Project6/Project6")
callPrices <- read.csv("callPrices.csv",header = FALSE)
